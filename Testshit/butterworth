import numpy as np
from scipy.signal import butter, filtfilt
import matplotlib.pyplot as plt
from Data import data
import Butterworthfilter

# Define example parameters
lowcut = 0.01  # Low cutoff frequency in Hz
highcut = 3  # High cutoff frequency in Hz
fs = 100.0  # Sampling frequency in Hz
order = 10  # Filter order

def butter_bandpass(lowcut, highcut, fs, order):
    nyquist = 0.5 * fs
    low = lowcut / nyquist
    high = highcut / nyquist
    b, a = butter(order, [low, high], btype='band')
    return b, a

def butter_bandpass_filter(theta_dot, lowcut, highcut, fs, order):
    b, a = butter_bandpass(lowcut, highcut, fs, order=order)
    filtered_theta_dot = filtfilt(b, a, theta_dot)
    return filtered_theta_dot

# Apply the bandpass filter
#filtered_theta_dot = butter_bandpass_filter(theta_dot, lowcut, highcut, fs, order)

# Dit is om te plotten, maar Plot.py doet dat al.
# # Plot the original and filtered data
# plt.figure()
# plt.plot(t, theta_dot, label='Original theta_dot')
# plt.plot(t, filtered_theta_dot, label='Filtered theta_dot')
# plt.xlabel('Time [s]')
# plt.ylabel('Amplitude')
# plt.title('Butterworth Bandpass Filter (Order = 2)')
# plt.legend()
# plt.grid(True)
# plt.show()
